using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using AplicacionPedidos.Data;
using AplicacionPedidos.Models;
using Microsoft.AspNetCore.Authorization;
using System.IO;
using Microsoft.AspNetCore.Hosting;

namespace AplicacionPedidos.Controllers
{
    public class ProductModelsController : Controller
    {
        private readonly DBPedidosContext _context;
        private readonly IWebHostEnvironment _webHostEnvironment;

        public ProductModelsController(DBPedidosContext context, IWebHostEnvironment webHostEnvironment)
        {
            _context = context;
            _webHostEnvironment = webHostEnvironment;
        }

        // GET: ProductModels
        public async Task<IActionResult> Index(string searchString, string categoria, decimal? precioMin, decimal? precioMax, string sortOrder)
        {
            try
            {
                // Configurar ordenamiento
                ViewData["NombreSortParm"] = String.IsNullOrEmpty(sortOrder) ? "nombre_desc" : "";
                ViewData["PrecioSortParm"] = sortOrder == "Precio" ? "precio_desc" : "Precio";
                ViewData["StockSortParm"] = sortOrder == "Stock" ? "stock_desc" : "Stock";
                ViewData["CategoriaSortParm"] = sortOrder == "Categoria" ? "categoria_desc" : "Categoria";
                
                // Guardar filtros en ViewData para mantenerlos en la vista
                ViewData["CurrentFilter"] = searchString;
                ViewData["CurrentCategoria"] = categoria;
                ViewData["CurrentPrecioMin"] = precioMin;
                ViewData["CurrentPrecioMax"] = precioMax;

                // Consulta base
                var productos = _context.Products.AsQueryable();

                // Obtener categorías disponibles (si existen)
                List<string> categorias = new List<string>();
                try
                {
                    categorias = await productos
                        .Where(p => p.Categoria != null && p.Categoria != "")
                        .Select(p => p.Categoria)
                        .Distinct()
                        .ToListAsync();
                }
                catch
                {
                    // Si hay un error al cargar las categorías, usar una lista predeterminada
                    categorias = new List<string> { "Electrónica", "Ropa", "Hogar", "Alimentos", "Juguetes", "Libros", "Otros" };
                }

                ViewData["Categorias"] = categorias;

                // Aplicar filtros
                if (!String.IsNullOrEmpty(searchString))
                {
                    productos = productos.Where(s => s.Nombre.Contains(searchString) || 
                                                s.Descripcion.Contains(searchString));
                }

                if (!String.IsNullOrEmpty(categoria))
                {
                    productos = productos.Where(p => p.Categoria == categoria);
                }

                if (precioMin.HasValue)
                {
                    productos = productos.Where(p => p.Precio >= precioMin.Value);
                }

                if (precioMax.HasValue)
                {
                    productos = productos.Where(p => p.Precio <= precioMax.Value);
                }

                // Aplicar ordenamiento
                switch (sortOrder)
                {
                    case "nombre_desc":
                        productos = productos.OrderByDescending(p => p.Nombre);
                        break;
                    case "Precio":
                        productos = productos.OrderBy(p => p.Precio);
                        break;
                    case "precio_desc":
                        productos = productos.OrderByDescending(p => p.Precio);
                        break;
                    case "Stock":
                        productos = productos.OrderBy(p => p.Stock);
                        break;
                    case "stock_desc":
                        productos = productos.OrderByDescending(p => p.Stock);
                        break;
                    case "Categoria":
                        productos = productos.OrderBy(p => p.Categoria);
                        break;
                    case "categoria_desc":
                        productos = productos.OrderByDescending(p => p.Categoria);
                        break;
                    default:
                        productos = productos.OrderBy(p => p.Nombre);
                        break;
                }

                return View(await productos.ToListAsync());
            }
            catch (Exception ex)
            {
                // Manejar cualquier error que ocurra
                ViewData["ErrorMessage"] = $"Ocurrió un error al cargar los productos: {ex.Message}";
                return View(new List<ProductModel>());
            }
        }

        // GET: ProductModels/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var productModel = await _context.Products
                .FirstOrDefaultAsync(m => m.Id == id);
            if (productModel == null)
            {
                return NotFound();
            }

            return View(productModel);
        }

        // GET: ProductModels/Create
        [Authorize(Policy = "RequireEmpleadoRole")]
        public IActionResult Create()
        {
            // Lista de categorías para el dropdown
            var categorias = new List<string> { "Electrónica", "Ropa", "Hogar", "Alimentos", "Juguetes", "Libros", "Otros" };
            ViewBag.Categorias = new SelectList(categorias);
            return View();
        }

        // POST: ProductModels/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Policy = "RequireEmpleadoRole")]
        public async Task<IActionResult> Create([Bind("Id,Nombre,Descripcion,Precio,Stock,Categoria,ImagenFile")] ProductModel productModel)
        {
            if (ModelState.IsValid)
            {
                // Asegúrate de que la categoría no sea null
                if (productModel.Categoria == null)
                {
                    productModel.Categoria = "";
                }

                // Manejo de la imagen si se proporcionó
                if (productModel.ImagenFile != null)
                {
                    string uploadsFolder = Path.Combine(_webHostEnvironment.WebRootPath, "images/products");
                    
                    // Crear la carpeta si no existe
                    if (!Directory.Exists(uploadsFolder))
                    {
                        Directory.CreateDirectory(uploadsFolder);
                    }
                    
                    string uniqueFileName = Guid.NewGuid().ToString() + "_" + productModel.ImagenFile.FileName;
                    string filePath = Path.Combine(uploadsFolder, uniqueFileName);
                    
                    using (var fileStream = new FileStream(filePath, FileMode.Create))
                    {
                        await productModel.ImagenFile.CopyToAsync(fileStream);
                    }
                    
                    productModel.ImagenUrl = "/images/products/" + uniqueFileName;
                }
                else
                {
                    // Imagen por defecto si no se proporciona
                    productModel.ImagenUrl = "/images/products/no-image.jpg";
                }

                _context.Add(productModel);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            
            // Si hay errores, repoblar la lista de categorías
            var categorias = new List<string> { "Electrónica", "Ropa", "Hogar", "Alimentos", "Juguetes", "Libros", "Otros" };
            ViewBag.Categorias = new SelectList(categorias);
            return View(productModel);
        }

        // GET: ProductModels/Edit/5
        [Authorize(Policy = "RequireEmpleadoRole")]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var productModel = await _context.Products.FindAsync(id);
            if (productModel == null)
            {
                return NotFound();
            }
            
            // Lista de categorías para el dropdown
            var categorias = new List<string> { "Electrónica", "Ropa", "Hogar", "Alimentos", "Juguetes", "Libros", "Otros" };
            ViewBag.Categorias = new SelectList(categorias, productModel.Categoria);
            return View(productModel);
        }

        // POST: ProductModels/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Policy = "RequireEmpleadoRole")]
        public async Task<IActionResult> Edit(int id, [Bind("Id,Nombre,Descripcion,Precio,Stock,Categoria,ImagenUrl,ImagenFile")] ProductModel productModel)
        {
            if (id != productModel.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    // Asegúrate de que la categoría no sea null
                    if (productModel.Categoria == null)
                    {
                        productModel.Categoria = "";
                    }
                    
                    // Manejo de la imagen si se proporcionó una nueva
                    if (productModel.ImagenFile != null)
                    {
                        string uploadsFolder = Path.Combine(_webHostEnvironment.WebRootPath, "images/products");
                        
                        // Crear la carpeta si no existe
                        if (!Directory.Exists(uploadsFolder))
                        {
                            Directory.CreateDirectory(uploadsFolder);
                        }
                        
                        string uniqueFileName = Guid.NewGuid().ToString() + "_" + productModel.ImagenFile.FileName;
                        string filePath = Path.Combine(uploadsFolder, uniqueFileName);
                        
                        using (var fileStream = new FileStream(filePath, FileMode.Create))
                        {
                            await productModel.ImagenFile.CopyToAsync(fileStream);
                        }
                        
                        // Eliminar imagen anterior si existe
                        if (!string.IsNullOrEmpty(productModel.ImagenUrl))
                        {
                            string oldImagePath = Path.Combine(_webHostEnvironment.WebRootPath, productModel.ImagenUrl.TrimStart('/'));
                            if (System.IO.File.Exists(oldImagePath) && !oldImagePath.Contains("no-image.jpg"))
                            {
                                System.IO.File.Delete(oldImagePath);
                            }
                        }
                        
                        productModel.ImagenUrl = "/images/products/" + uniqueFileName;
                    }

                    _context.Update(productModel);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ProductModelExists(productModel.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            
            // Si hay errores, repoblar la lista de categorías
            var categorias = new List<string> { "Electrónica", "Ropa", "Hogar", "Alimentos", "Juguetes", "Libros", "Otros" };
            ViewBag.Categorias = new SelectList(categorias, productModel.Categoria);
            return View(productModel);
        }

        // GET: ProductModels/Delete/5
        [Authorize(Policy = "RequireEmpleadoRole")]
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var productModel = await _context.Products
                .FirstOrDefaultAsync(m => m.Id == id);
            if (productModel == null)
            {
                return NotFound();
            }

            return View(productModel);
        }

        // POST: ProductModels/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        [Authorize(Policy = "RequireEmpleadoRole")]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var productModel = await _context.Products.FindAsync(id);
            if (productModel != null)
            {
                // Eliminar imagen si existe
                if (!string.IsNullOrEmpty(productModel.ImagenUrl))
                {
                    string imagePath = Path.Combine(_webHostEnvironment.WebRootPath, productModel.ImagenUrl.TrimStart('/'));
                    if (System.IO.File.Exists(imagePath) && !imagePath.Contains("no-image.jpg"))
                    {
                        System.IO.File.Delete(imagePath);
                    }
                }
                
                _context.Products.Remove(productModel);
            }

            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ProductModelExists(int id)
        {
            return _context.Products.Any(e => e.Id == id);
        }
    }
}
